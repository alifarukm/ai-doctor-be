// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../prisma-client"
  previewFeatures = ["schemaEngineDriverAdapters"]
}

datasource db {
  provider = "sqlite"
}

enum PatientType {
  pediatric
  adult
}

model users {
  id        String   @id @default(uuid())
  
  email     String   @unique
  name      String?

  // Hasta bilgileri (opsiyonel)
  age    Int?
  weight Float?
  type   PatientType?

  user_queries user_queries[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model disease_categories {
  id Int @id @default(autoincrement())

  name        String     @unique // "ÜST SOLUNUM YOLU ENFEKSİYONLARI"
  description String?
  diseases    diseases[]
}

model diseases {
  id Int @id @default(autoincrement())
  
  name        String             @unique // "Tonsillit", "Farenjit" vb.
  description String? // Hastalık açıklaması
  category_id String
  category    disease_categories @relation(fields: [category_id], references: [id])
  vectorId    String?            @unique // Vectorize'daki embedding ID

  symptoms             disease_symptoms[]
  treatments           medications_treatments[]
  diagnosis_criterions diagnosis_criterions[]
  supportive_cares     supportive_care[]

  @@index([category_id])
  @@index([name])
}

model symptoms {
  id Int @id @default(autoincrement())

  name        String  @unique // "Boğaz ağrısı", "Ateş" vb.
  description String?
  severity    String? // "hafif", "orta", "şiddetli"
  vectorId    String? @unique // Vectorize'daki embedding ID

  disease_symptoms disease_symptoms[]
  query_symptoms   query_symptoms[]

  @@index([name])
}

// Hastalık-Semptom ilişki tablosu (Many-to-Many)
model disease_symptoms {
  id Int @id @default(autoincrement())

  disease_id String
  symptom_id String
  disease    diseases @relation(fields: [disease_id], references: [id], onDelete: Cascade)
  symptom    symptoms @relation(fields: [symptom_id], references: [id], onDelete: Cascade)

  // Semptom özellikleri
  is_primary  Boolean @default(false) // Ana semptom mu?
  importance  Int     @default(1) // 1-10 arası önem derecesi
  description String? // "Ani başlangıç", "Şiddetli" gibi niteleyiciler

  @@unique([disease_id, symptom_id])
  @@index([disease_id])
  @@index([symptom_id])
}

// Tanı kriterleri
model diagnosis_criterions {
  id Int @id @default(autoincrement())

  disease_id String
  disease    diseases @relation(fields: [disease_id], references: [id], onDelete: Cascade)

  criteria String // "Ani başlangıç, ateş, şiddetli boğaz ağrısı"
  type     String // "positive" veya "negative" (ayırt edici özellikler)
  priority Int    @default(1)

  @@index([disease_id])
}

// İlaçlar (Active Ingredients)
model medications {
  id Int @id @default(autoincrement())
  
  generic_name      String  @unique // "Amoksisilin-Klavulanik asit"
  description       String?
  type              String // "antibiyotik", "analjezik", "antihistaminik", "dekonjestan" vb.
  contraindications String? // "Kreatinin 30 altı ise başlama"

  // İlişkiler
  medications_brand_names medications_brand_names[]
  medications_dosages     medications_dosages[]

  @@index([generic_name])
  @@index([type])
}

// Marka isimleri
model medications_brand_names {
  id Int @id @default(autoincrement())

  name          String      @unique // "KLAVUNAT", "AUGMENTIN" vb.
  medication_id String
  medication    medications @relation(fields: [medication_id], references: [id], onDelete: Cascade)

  @@index([medication_id])
  @@index([name])
}

// Tedavi protokolleri
model medications_treatments {
  id Int @id @default(autoincrement())

  disease_id String
  disease    diseases @relation(fields: [disease_id], references: [id], onDelete: Cascade)

  type        String // "antibiyotik", "semptomatik", "destekleyici", "ses_istirahati"
  name        String // "Antibiyotik Tedavisi", "Semptomatik Tedavi"
  description String? // Detaylı açıklama
  priority    Int     @default(1) // Tedavi önceliği
  is_required Boolean @default(true) // Zorunlu mu?
  conditions  String? // "Şiddetli ağrı, ateş ve balgam varsa"

  // İlişkiler
  dosages medications_dosages[]

  @@index([disease_id])
}

// Doz bilgileri
model medications_dosages {
  id Int @id @default(autoincrement())

  treatment_id  String
  treatment     medications_treatments @relation(fields: [treatment_id], references: [id], onDelete: Cascade)
  medication_id String
  medication    medications            @relation(fields: [medication_id], references: [id], onDelete: Cascade)

  // Hasta tipi ve yaş aralığı
  patient_type String // "pediatric" veya "adult"
  age_min      Int? // Minimum yaş (ay cinsinden)
  age_max      Int? // Maximum yaş (ay cinsinden)
  weight_min   Float? // Minimum kilo (kg)
  weight_max   Float? // Maximum kilo (kg)

  // Doz bilgileri
  dose            String // "90 mg/kg/gün", "1000 mg", "15mg/kg/gün"
  frequency       String // "günde 2 kez", "her 6 saatte", "tek doz"
  duration        String // "10 gün", "5 gün"
  max_daily_dose  String? // "60mg/kg/gün", "2000 mg"
  max_single_dose String? // "500 mg", "400mg/doz"

  // Ek bilgiler
  administration String? // "aç karnına", "yemekle birlikte"
  notes          String? // Özel notlar
  is_alternative Boolean @default(false) // Alternatif tedavi mi?
  allergy_info   String? // "penisilin alerjisi varsa"

  @@index([treatment_id])
  @@index([medication_id])
}

// Genel öneriler ve destek tedavileri
model supportive_care {
  id Int @id @default(autoincrement())

  disease_id String?
  disease    diseases? @relation(fields: [disease_id], references: [id], onDelete: Cascade)

  category    String // "hidrasyon", "istirahat", "irrritanlardan_kacinma"
  title       String // "Bol sıvı alımı", "Ses istirahati"
  description String // Detaylı açıklama
  priority    Int    @default(1)

  @@index([disease_id])
}

// Kullanıcı sorguları (teşhis geçmişi)
model user_queries {
  id         String  @id @default(uuid())
  session_id String? // Opsiyonel session takibi
  user_id   String?
  
  // Girilen semptomlar
  raw_symptoms String // Kullanıcının girdiği metin
  vector_id    String? // Vectorize'daki query embedding ID

  // Sonuçlar
  diagnosed_diseases Json? // Teşhis edilen hastalıklar ve skorları
  confidence         Float? // Genel güven skoru

  // İlişkiler
  user      users?      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  symptoms  query_symptoms[]

  created_at DateTime @default(now())

  @@index([session_id])
  @@index([created_at])
}

// Kullanıcı sorgusunda tespit edilen semptomlar
model query_symptoms {
  id         String       @id @default(uuid())
  query_id   String
  query      user_queries @relation(fields: [query_id], references: [id], onDelete: Cascade)
  symptom_id String
  symptom    symptoms     @relation(fields: [symptom_id], references: [id], onDelete: Cascade)

  confidence Float @default(1.0) // 0-1 arası eşleşme güveni

  createdAt DateTime @default(now())

  @@unique([query_id, symptom_id])
  @@index([query_id])
  @@index([symptom_id])
}

// Vectorize metadata tablosu (embedding tracking)
model vector_embeddings {
  id          String @id @default(uuid())
  vector_id   String @unique // Vectorize'daki ID
  entity_type String // "disease", "symptom", "treatment"
  entity_id   String // İlgili entity'nin ID'si
  metadata    Json? // Ek metadata

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([entity_type, entity_id])
  @@index([vector_id])
}
